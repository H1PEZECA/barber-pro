/* eslint-disable @typescript-eslint/no-unused-vars */
"use server"

import { getServerSession } from "next-auth"
import { revalidatePath } from "next/cache"
import { authOptions } from "../_lib/auth"
import { db } from "../_lib/prisma"
import { validateBookingAvailability } from "./get-service-employees"

interface CreateBookingParams {
  serviceId: string
  barbershopId: string
  employeeId: string
  date: Date
}

export const createBooking = async (params: CreateBookingParams) => {
  const session = await getServerSession(authOptions)

  if (!session?.user || !("id" in session.user)) {
    throw new Error("Usu√°rio n√£o autenticado")
  }

  const userId = (session.user as { id: string }).id

  console.log("=== CREATE BOOKING PARAMS ===", params)
  console.log("=== USER ID ===", userId)

  // ‚úÖ SOLU√á√ÉO 1: VALIDA√á√ÉO CR√çTICA ANTES DE CRIAR O BOOKING
  // Esta valida√ß√£o acontece no momento exato da confirma√ß√£o
  const validation = await validateBookingAvailability({
    barbershopId: params.barbershopId,
    serviceId: params.serviceId,
    employeeId: params.employeeId,
    scheduledAt: params.date,
  })

  if (!validation.isValid) {
    console.log("‚ùå VALIDA√á√ÉO FALHOU:", validation.error)
    throw new Error(validation.error)
  }

  console.log("‚úÖ VALIDA√á√ÉO PASSOU - Hor√°rio dispon√≠vel")

  // ‚úÖ SOLU√á√ÉO 2: TRANSA√á√ÉO AT√îMICA PARA EVITAR RACE CONDITIONS
  // Usar uma transa√ß√£o garante que a verifica√ß√£o e cria√ß√£o aconte√ßam atomicamente
  try {
    const newBooking = await db.$transaction(async (prisma) => {
      // ‚úÖ DOUBLE-CHECK: Verificar novamente dentro da transa√ß√£o
      const conflictingBooking = await prisma.booking.findFirst({
        where: {
          employeeId: params.employeeId,
          scheduledAt: params.date,
          status: {
            in: ["SCHEDULED", "CONFIRMED", "IN_PROGRESS"],
          },
        },
      })

      if (conflictingBooking) {
        throw new Error(
          "Hor√°rio n√£o est√° mais dispon√≠vel - outro agendamento foi criado",
        )
      }

      // ‚úÖ Verificar se o employee ainda existe e est√° ativo
      const employee = await prisma.employee.findFirst({
        where: {
          id: params.employeeId,
          barbershopId: params.barbershopId,
          isActive: true,
        },
        include: {
          user: {
            select: { id: true, name: true },
          },
        },
      })

      if (!employee) {
        throw new Error("Funcion√°rio n√£o encontrado ou inativo")
      }

      // ‚úÖ Verificar se o servi√ßo ainda existe e est√° ativo
      const service = await prisma.barbershopService.findFirst({
        where: {
          id: params.serviceId,
          barbershopId: params.barbershopId,
          isActive: true,
        },
      })

      if (!service) {
        throw new Error("Servi√ßo n√£o encontrado ou inativo")
      }

      // ‚úÖ CRIAR O BOOKING - s√≥ chega aqui se tudo estiver OK
      const booking = await prisma.booking.create({
        data: {
          userId,
          serviceId: params.serviceId,
          barbershopId: params.barbershopId,
          employeeId: params.employeeId,
          scheduledAt: params.date,
          status: "SCHEDULED", // ‚úÖ Status expl√≠cito
        },
        include: {
          service: {
            select: {
              id: true,
              name: true,
              price: true,
            },
          },
          employee: {
            include: {
              user: {
                select: { id: true, name: true },
              },
            },
          },
        },
      })

      console.log("‚úÖ BOOKING CRIADO COM SUCESSO:", booking.id)
      return booking
    })

    // ‚úÖ Revalidar paths ap√≥s sucesso
    revalidatePath(`/barbershops/${params.barbershopId}`, "page")
    revalidatePath("/bookings", "page")

    return {
      id: newBooking.id,
      scheduledAt: newBooking.scheduledAt,
      employee: newBooking.employee,
    }
  } catch (error) {
    console.error("‚ùå ERRO NA TRANSA√á√ÉO:", error)

    // ‚úÖ Tratamento espec√≠fico de erros
    if (error instanceof Error) {
      // Se √© erro de conflito, relan√ßar com mensagem espec√≠fica
      if (error.message.includes("n√£o est√° mais dispon√≠vel")) {
        throw new Error(
          "Este hor√°rio acabou de ser reservado por outro cliente. Por favor, escolha outro hor√°rio.",
        )
      }
      throw error
    }

    throw new Error("Erro interno do servidor ao criar o agendamento")
  }
}

// ‚úÖ SOLU√á√ÉO 3: FUN√á√ÉO PARA VERIFICAR DISPONIBILIDADE EM TEMPO REAL
// Esta fun√ß√£o pode ser chamada pelo frontend para atualizar a UI
export const checkRealTimeAvailability = async ({
  barbershopId,
  employeeId,
  scheduledAt,
}: {
  barbershopId: string
  employeeId: string
  scheduledAt: Date
}) => {
  const conflictingBooking = await db.booking.findFirst({
    where: {
      employeeId,
      scheduledAt,
      barbershopId,
      status: {
        in: ["SCHEDULED", "CONFIRMED", "IN_PROGRESS"],
      },
    },
  })

  return {
    isAvailable: !conflictingBooking,
    conflictingBooking: conflictingBooking
      ? {
          id: conflictingBooking.id,
          userId: conflictingBooking.userId,
        }
      : null,
  }
}

// ‚úÖ SOLU√á√ÉO 4: LIMPEZA AUTOM√ÅTICA DE BOOKINGS EXPIRADOS
// Executar esta fun√ß√£o periodicamente para liberar hor√°rios
export const cleanupExpiredBookings = async () => {
  const now = new Date()

  const expiredBookings = await db.booking.updateMany({
    where: {
      scheduledAt: {
        lt: now,
      },
      status: {
        in: ["SCHEDULED", "CONFIRMED"],
      },
    },
    data: {
      status: "COMPLETED",
    },
  })

  console.log(
    `‚úÖ ${expiredBookings.count} bookings expirados foram atualizados`,
  )
  return expiredBookings.count
}

// ===== FUN√á√ÉO DE DEBUG MELHORADA =====
export const debugBookingConflicts = async () => {
  console.log("üîç DEBUGANDO CONFLITOS DE AGENDAMENTO...")

  // Buscar bookings duplicados no mesmo hor√°rio/employee
  const duplicateBookings = await db.booking.findMany({
    where: {
      status: {
        in: ["SCHEDULED", "CONFIRMED", "IN_PROGRESS"],
      },
    },
    orderBy: [{ employeeId: "asc" }, { scheduledAt: "asc" }],
  })

  // ‚úÖ CORRIGIDO: Tipagem adequada para o Record
  const conflicts: Record<string, typeof duplicateBookings> = {}

  duplicateBookings.forEach((booking) => {
    const key = `${booking.employeeId}-${booking.scheduledAt.toISOString()}`
    if (!conflicts[key]) {
      conflicts[key] = []
    }
    conflicts[key].push(booking)
  })

  // Filtrar apenas conflitos reais (mais de 1 booking no mesmo slot)
  const realConflicts = Object.entries(conflicts).filter(
    ([_, bookings]) => bookings.length > 1,
  )

  console.log("‚ö†Ô∏è CONFLITOS ENCONTRADOS:", realConflicts.length)

  realConflicts.forEach(([key, bookings]) => {
    console.log(`üö® Conflito em ${key}:`)
    bookings.forEach((booking) => {
      console.log(`  - Booking ID: ${booking.id}, User: ${booking.userId}`)
    })
  })

  return realConflicts
}
