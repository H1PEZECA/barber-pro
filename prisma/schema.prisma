generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?    // üîπ Removido @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)

  // Relacionamentos espec√≠ficos
  barberProfile   Barber?   // Se for barbeiro
  employeeProfile Employee? // Se for funcion√°rio
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// ENTIDADE BARBEIRO (DONO)
model Barber {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  licenseNumber     String?
  specialties       String[]
  yearsOfExperience Int?

  // Chave estrangeira da barbearia
  barbershopId String     @unique
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)

  employees Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Barbershop {
  id          String   @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String

  // Rela√ß√£o inversa obrigat√≥ria
  barber Barber?

  openingHours Json?
  isActive     Boolean @default(true)

  services  BarbershopService[]
  employees Employee[]
  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENTIDADE FUNCION√ÅRIO
model Employee {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  barberId     String
  barber       Barber     @relation(fields: [barberId], references: [id], onDelete: Cascade)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)

  employeeCode String   @unique
  salary       Decimal? @db.Decimal(10, 2)
  hireDate     DateTime @default(now())
  position     String?
  workSchedule Json?
  isActive     Boolean  @default(true)

  assignedBookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([barberId, employeeCode])
}


model BarbershopService {
  id          String  @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  bookings     Booking[]
}

model Booking {
  id String @id @default(uuid())

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceId String
  service   BarbershopService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)

  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)

  scheduledAt DateTime // data + hor√°rio juntos

  status BookingStatus @default(SCHEDULED)
  notes  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum UserRole {
  USER
  EMPLOYEE
  BARBER
}

enum BookingStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
