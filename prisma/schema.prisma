// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamento com barbeiros
  barber        Barber?
  
  // Relacionamento com agendamentos (cliente)
  bookings      Booking[]
}

model Barbershop {
  id          String   @id @default(cuid())
  name        String
  address     String
  imageUrl    String
  phones      String[]
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  services    BarbershopService[]
  barbers     Barber[]
  bookings    Booking[]
}

model Barber {
  id           String     @id @default(cuid())
  userId       String     @unique
  barbershopId String
  role         BarberRole @default(BARBER)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relacionamentos
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  bookings     Booking[]
}

model BarbershopService {
  id           String     @id @default(cuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relacionamentos
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  bookings     Booking[]
}

model Booking {
  id           String            @id @default(cuid())
  userId       String
  barberId     String?
  barbershopId String
  serviceId    String
  date         DateTime
  status       BookingStatus     @default(CONFIRMED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // Relacionamentos
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  barber       Barber?           @relation(fields: [barberId], references: [id], onDelete: SetNull)
  barbershop   Barbershop        @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  service      BarbershopService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

enum BarberRole {
  ADMIN    // Dono da barbearia
  MANAGER  // Gerente
  BARBER   // Barbeiro comum
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
}